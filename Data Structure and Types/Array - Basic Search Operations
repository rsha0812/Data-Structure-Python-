Array - Data structure having same type of elements (int,char etc). Cannnot have mixed type of element.

#### Reverse the String 
### Q1) Write a program to reverse an array or string

### Code: 
'''
Steps : 
1) Initialize start and end indexes as start = 0, end = n-1 
2) In a loop, swap arr[start] with arr[end] and change start and end as follow:
start = start +1, end = end â€“ 1
'''

def reverse(arr): 
    n = len(arr)
    start = 0
    end = n-1 
    while start < end: 
        arr[start],arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    return arr
        
arr1 = [1, 2, 3, 4, 5, 6]
print("Actual Array")
print(arr1)
print("Reverse Array")
print(reverse(arr1))

#### Left Rotation by k times
### Q2) Given an array of integers arr[] of size N and an integer, the task is to rotate the array elements to the left by d positions.
### code: 
def left_rotate_arr(arr,d):
    n = len(arr)
    print(n) ## 5 
    k = arr.index(d)
    new_list = arr[k+1:] + arr[0:k+1]
    return new_list
        
arr1 = [1, 3, 5, 7, 9]
print(left_rotate_arr(arr1,5)) 
### Output: [7, 9, 1, 3, 5]
print(left_rotate_arr(arr1,3))
### Output : [5, 7, 9, 1, 3]  


#### Right Rotation by k times
### Q3) Given an Array of size N and a values K, around which we need to right rotate the array. How to quickly print the right rotated array?
### code: 

def right_rotate_arr(arr,k):
    n = len(arr) ## 5 
    new_list = arr[n-k:] + arr[0:n-k] ### arr[5-2:] + arr[0:5-2]
    return new_list
   
arr1 = [1, 3, 5, 7, 9]
print(right_rotate_arr(arr1,2))    
### Output : [7, 9, 1, 3, 5]


###### Search/Delete/Insert Operation in an Unsorted Array #####

### Q4) Search Operation in Unsorted Array 
###Code: 
def search(arr,ele): 
    n = len(arr)
    for i in range(0,n):
        if arr[i] == ele: 
            return i
            break 
    return -1 
    
arr1 = [5,1,4,3,2,6]
ele = 4
# print(search(arr1,ele))
index = search(arr1,ele)
if index != -1: 
    print(f"Element found at index : {index}")
else: 
    print("Element not foudn in given array")

#### Q5) Insert Operation in Unsorted Array 
# 1) Insert element at the end of array 
# 2) Insert element at any position 
### Code 1: 
def insert_elem_end(arr,ele): 
    arr.append(ele)
    return arr
arr1 = [5,1,4,2,6]
print(insert_elem_end(arr1,3))
    
### Code 2:   
def insert_elem_end(arr,ele,indx): 
    arr.insert(indx,ele)
    return arr
arr1 = [5,1,4,2,6]
print(insert_elem_end(arr1,3,2))


#### Q6) Delete Operation in an Unsorted Array 
# 1) Removing the given element -- arr.remove(element)
# 2) Removing the element at index(i) -- arr.pop(i)
# 3) Removing the element at end --- arr.pop()

### Code: 
# 1) Removing the given element -- arr.remove(element)
def delete_element(arr,ele): 
    for i in arr: 
        if i == ele: 
            arr.remove(i)
            
    return arr
arr1 = [5,1,4,3,2,6]
ele = 3
print("Original Array")
print(arr1)
print(f"Array after removing the element : {ele}")
print(delete_element(arr1,ele))

#### O/P : 
# Original Array
# [5, 1, 4, 3, 2, 6]
# Array after removing the element : 3
# [5, 1, 4, 2, 6]

# 2) Removing the element at index(i) -- arr.pop(i)

def del_ele_index(arr,indx): 
    n = len(arr)
    for i in range(0,n): 
        if i == indx: 
            arr.pop(i)
    return arr
    
arr1 = [5,1,4,3,2,6]
indx = 2
print("Original Array")
print(arr1)
print(f"Array after removing the element {arr1[indx]} at index {indx}")
print(del_ele_index(arr1,indx))

#### O/P :
# Original Array
# [5, 1, 4, 3, 2, 6]
# Array after removing the element 4 at index 2
# [5, 1, 3, 2, 6]

# 3) Removing the element at end --- arr.pop()
def delete_element_end(arr): 
    arr.pop()
    return arr
arr1 = [5,1,4,3,2,6]
print("Original Array")
print(arr1)
print(f"Array after removing the last element ")
print(delete_element_end(arr1))

#### O/P :
# Original Array
# [5, 1, 4, 3, 2, 6]
# Array after removing the last element 
# [5, 1, 4, 3, 2]


###### Search/Delete/Insert Operation in an Sorted Array ##### --> Binary Search

### Q7) Search Operation in Sorted Array 

### Code: 
def search(arr,low,high,elem): 
    n = len(arr)
    # mid = (0+((n-1)-0))//2 ### 0 + 5 //2 = 2
    mid = (low + high)//2
    
    for i in range(0,n): 
        if arr[mid] == elem: 
            return mid
            break 
        if elem > arr[mid]: 
            return search(arr,mid+1,high,elem)
            
        if elem < arr[mid]: 
            return search(arr,low,mid-1,elem)
    return -1
  
arr1 = [1,2,3,4,5,6]
elem = 4
print(search(arr1,0,len(arr1),elem))

index = (search(arr1,0,len(arr1),elem))
if index != -1: 
    print(f"Element {elem} found in given array at index {index}")
else: 
    print(f"Element {elem} not found in given array")
    
# Time Complexity: O(log(n)) Using Binary Search
# Auxiliary Space: O(log(n)) due to recursive calls


### Q8) print all possible subarrays for given array using recursion

### Code: 
# Recursive function to print all possible subarrays
# for given array
def printSubArrays(arr, start, end):
     
    # Stop if we have reached the end of the array   
    if end == len(arr):
        return
     
    # Increment the end point and start from 0
    elif start > end:
        return printSubArrays(arr, 0, end + 1)
         
    # Print the subarray and increment the starting
    # point
    else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)
         
# Driver code
arr = [1, 2, 3]
printSubArrays(arr, 0, 0)
