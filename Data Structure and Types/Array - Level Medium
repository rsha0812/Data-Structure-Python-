#Q2) Given a sorted array and a value x, the ceiling of x is the smallest element in an array greater than or equal to x, and the floor is the greatest element smaller than or equal to x. Assume that the array is sorted in non-decreasing order. Write efficient functions to find the floor and ceiling of x. 

### Code: 
'''
For example, let the input array be {1, 2, 8, 10, 10, 12, 19}
For x = 0:    floor doesn't exist in array,  ceil  = 1
For x = 1:    floor  = 1,  ceil  = 1
For x = 5:    floor  = 2,  ceil  = 8
For x = 20:   floor  = 19,  ceil doesn't exist in array

Method 1 (Linear Search) 
Algorithm to search ceiling of x: 

If x is smaller than or equal to the first element in the array then return 0(index of the first element).
Else linearly search for an index i such that x lies between arr[i] and arr[i+1]. 
If we do not find an index i in step 2, then return -1. 
'''

def ceilsearch(arr,x): 
    n = len(arr)
    floor = 0
    ceil = 0
    for i in range(0,n): 
        if arr[i] <= x <= arr[i+1]: 
            # floor = arr[i]
            ceil = arr[i]
        if x < arr[0]: 
            return 0 
        if x > arr[-1]: 
            return -1
    return ceil
    
arr1 = [1, 2, 8, 10, 10, 12, 19]
x = 20
index = ceilsearch(arr1,x)

if index == -1: 
    print(f"Ceiling of {x} doesn't exist in array")
else: 
    print ("ceiling of %d is %d"%(x, arr1[index]))
# print(ceilsearch(arr1,0))
# print(ceilsearch(arr1,1))
# print(ceilsearch(arr1,5))
# print(ceilsearch(arr1,20))


#Q3 ) Given an array of size N filled with numbers from 1 to N-1 in random order. The array has only one repetitive element. The task is to find the repetitive element.
### Code: 
'''
Sort the given array.
Traverse the array and  compare the array elements with its index 
if arr[i] != i+1, it means that arr[i] is repetitive, So Just return arr[i]. 
Otherwise, the array does not contain duplicates from 1 to n-1, In this case, return -1  
'''

def repetitive_element(arr): 
    n = len(arr)
    new_arr = {}
    rep_ele = 0
    
    for i in range(0,n): 
        if arr[i] in new_arr: 
            new_arr[arr[i]] += 1
        else: 
            new_arr[arr[i]] = 1
    
    for key,val in new_arr.items(): 
        if val > 1: 
            rep_ele = key 
            return rep_ele 
    return -1

# arr1 = [1, 3, 2, 3, 4]
arr1 = [1, 3, 2, 5, 4]
print(repetitive_element(arr1))

#Q4 ) Given an array arr[] of integers. Find a peak element i.e. an element that is not smaller than its neighbors. 

# Note: For corner elements, we need to consider only one neighbor. 

### Code: 

def peak_element(arr): 
    n = len(arr)
    peak_ele = 0 
    
    for i in range(0,n): 
        if arr[i] > arr[i-1] and arr[i] > arr[i+1]: 
            peak_ele = arr[i]
        if arr[0] > arr[1]: 
            peak_ele = arr[0]
            break 
        if arr[-1] > arr[-2]: 
            peak_ele = arr[-1]
            break 
    return (f"Peak Element is {peak_ele} at index {i}") 
    
# arr1 = [5, 10, 20, 15]
arr1 = [10, 20, 15, 2, 23, 90, 67]
print(peak_element(arr1))


#Q4 ) Write a program to print all the LEADERS in the array. An element is a leader if it is greater than all the elements to its right side. And the rightmost element is always a leader. 

### Code: 
'''
Follow the steps mentioned below to implement the idea:

We start from the last index position. The last position is always a leader, as there are no elements towards its right. 
And then we iterate on the array till we reach index position = 0.
Each time we keep a check on the maximum value
Every time we encounter a maximum value than the previous maximum value encountered, we either print or store the value as it is the leader
'''
def leaders(arr): 
    lead = []
    n = len(arr)
    lead.append(arr[-1])
    for i in range(n-1,0,-1): 
        if arr[i] > arr[i-1]: 
            lead.append(arr[i])
    return lead
        
        
arr1=[16, 17, 4, 3, 5, 2]
print(leaders(arr1))


#Q4 ) Given a sequence arr[] of size n, Write a function int equilibrium(int[] arr, int n) that returns an equilibrium index (if any) or -1 if no equilibrium index exists. 
'''
The equilibrium index of an array is an index such that the sum of elements at lower indexes is equal to the sum of elements at higher indexes. 

check if leftsum is equal to rightsum than return index(i) of arr[i]
rightsum = total_sum - arr[i]
'''

### Code : 
def equilibrium(arr): 
    left_sum = 0 
    print(total)
    n = len(arr)
    
    for i in range(0,n): 
        total = total - arr[i]
        # print("*****Total******")
        # print(total)
        if left_sum == total: 
            # print("When Left Sum is Equal to Total Sum")
            # print(left_sum)
            return i
        else: 
            left_sum = left_sum + arr[i]
            # print("left sum after iteration")
            # print(left_sum)
    return -1
arr1 = [-7, 1, 5, 2, -4, 3, 0]
# arr1 = [1,2,3]
print(equilibrium(arr1))
