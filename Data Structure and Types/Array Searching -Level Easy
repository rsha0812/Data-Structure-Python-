Code - Array Searching 
Level - Easy

#Q1) Write a program to reverse an array or string
### Code : 
def rev_arr(arr): 
    new = []
    i = len(arr)-1
    while i >= 0: 
        new.append(arr[i])
        i -= 1
    return new 

print(rev_arr([4,6,7]))
## Time Complexicity = O(n) ## as looping through n elements 
## Space Complexity = O(n) ## as appending n elements so n memory consumed.

#Q2) Program to find the minimum (or maximum) element of an array.
### Code: 
a = [1, 423, 6, 46, 34, 23, 13, 53, 4]
a_sorted = sorted(a)
print(a_sorted)
min_ele = a_sorted[0]
max_ele = a_sorted[-1]
print(f"Minimum element of Array {min_ele}")
print(f"Maximum element of Array {max_ele}")

#Q3) Last duplicate element in a sorted array.
### Code: 
def find_dup(arr): 
    n = len(arr)
    print(n)
    
    if n is None or n <= 0: 
        return 
    arr = sorted(arr)
    print(arr)
    
    for i in range(n-1,0,-1): 
        if arr[i] == arr[i-1]: 
            print(f"Duplicate Value at index {i} is {arr[i]}")
            return 
    print("No Duplicate Value found in given Array")
find_dup([1, 5, 6, 6, 7,5])
## Time Complexity, Tc = O(n)

#Q4 ) Most frequent element in an array.
### Code: 
def most_freq(arr):
    max_count = 0
    element_having_max_freq = 0
    n = len(arr)
    for i in range(0,n): ## O(n)
        count = 0
        for j in range(0,n): ## O(n)
            if arr[i] == arr[j]: 
                count += 1
        if count > max_count: 
            max_count = count 
            element_having_max_freq = arr[i]
    print(element_having_max_freq,max_count)
most_freq([1, 3, 2, 1, 4,2,4,2,2,1,1,1])
## Time Complexity, Tc = O(n**2)

#Q5 ) Least frequent element in an array.
def least_freq(arr):
    arr = sorted(arr)
    n = len(arr)
    count = 1
    min_count = n+1
    least_freq_element = arr[-1]
    print(least_freq_element)
    print(arr)
    for i in range(1,n): 
        if arr[i] == arr[i-1]: 
            count += 1
        else: 
            if (count < min_count):
                min_count = count
                least_freq_element = arr[i - 1]
 
            count = 1
    # If last element is least frequent
    if (count < min_count):
        min_count = count
        least_freq_element = arr[n - 1]
 
    return least_freq_element,min_count
    
print(least_freq([1, 3, 2, 1, 2, 2, 3, 1,5,6,7,7,6]))
## Time Complexity, Tc = O(nlog(n)) 

#Q6) Find a Fixed Point (Value equal to index) in a given array.
def fixed_point(arr):
    n = len(arr)
    for i in range(0,n): 
        if i is arr[i]: 
            print("Fixed Point Values are")
            return i
    return None
print(fixed_point([-10, -5, 0, 3,7]))
## Time Complexity, Tc = O(n) 

#Q7) Find the element that appears once in an array where every other element appears twice
### Code: 
def elem_appear_once(arr): 
    new = {}
    n = len(arr)
    for i in range(n): 
        if arr[i] in new: 
            new[arr[i]] += 1
        else: 
            new[arr[i]] = 1
    # return new  --> {2: 1, 3: 2, 5: 2, 4: 2}
    
    for key,value in new.items(): 
        if value == 1: 
            return key
   
print(elem_appear_once([2, 3, 5, 4, 5, 3, 4]))
## Time Complexity, Tc = O(n) 
## Space Complexity, Sc = O(n) 

#Q) Find common elements in three sorted arrays.

###Code: 
'''
Analysis:
Initialize three pointers, one for each array: ptr1, ptr2, and ptr3. Start them at the beginning of each respective array.
Iterate through the arrays while all pointers are within their respective array bounds:
a. If the elements at ptr1, ptr2, and ptr3 are equal, you have found a common element. Add it to the result list and increment all three pointers.
b. If the element at ptr1 is smaller than the elements at ptr2 and ptr3, increment ptr1.
c. If the element at ptr2 is smaller than the elements at ptr1 and ptr3, increment ptr2.
d. If the element at ptr3 is smaller than the elements at ptr1 and ptr2, increment ptr3.'''
def find_common_elements(arr1, arr2, arr3):
    ptr1 = ptr2 = ptr3 = 0
    common_elements = []

    while ptr1 < len(arr1) and ptr2 < len(arr2) and ptr3 < len(arr3):
        if arr1[ptr1] == arr2[ptr2] == arr3[ptr3]:
            print(arr1[ptr1])
            common_elements.append(arr1[ptr1])
            ptr1 += 1
            ptr2 += 1
            ptr3 += 1
        elif arr1[ptr1] < arr2[ptr2]:
            ptr1 += 1
        elif arr2[ptr2] < arr3[ptr3]:
            ptr2 += 1
        else:
            ptr3 += 1
    print(ptr1,ptr2,ptr3)
    return common_elements


# ar1 = [1, 5, 5]
# ar2 = [3, 4, 5, 5, 10] 
# ar3 = [5, 5, 10, 20]
ar1 = [1, 5, 10, 20, 40, 80]
ar2 = [6, 7, 20, 80, 100]
ar3 = [3, 4, 15, 20, 30, 70, 80, 120] 
print(find_common_elements(ar1,ar2,ar3))

#Q) Check for Majority Element in a sorted array

###Code: 
def majority_element(arr): 
    new_arr = {}
    n = len(arr)
    maj_ele = 0
    for i in range(n): 
        if arr[i] in new_arr:
            new_arr[arr[i]] += 1
        else: 
            new_arr[arr[i]] = 1
            
    for key,val in new_arr.items(): 
        if val >= n//2: 
            maj_ele = key 
            return True
        
    return False
ar1 = [1, 1, 2, 4, 4, 4, 6, 6]
ar3 = [1, 2, 3, 3, 3, 3, 10]
print(majority_element(ar1)) ## False
print(majority_element(ar3)) ## True

