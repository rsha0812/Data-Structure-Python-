'''
Create a link list of size N according to the given input literals. Each integer input is accompanied by an indicator which can either be 0 or 1. If it is 0, insert the integer in the beginning of the link list. If it is 1, insert the integer at the end of the link list. 
Input:
LinkedList: 9->0->5->1->6->1->2->0->5->0
Output: 5 2 9 5 6
'''
#Solution:

class Node:
    def __init__(self,data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
# Utility Function 
    def printlist(self):
        if self.head is None:
            print("Linked list is Empty")
            return
        itr = self.head
        llstr = ' '
        while itr:
            llstr += str(itr.data)+'--->'
            itr = itr.next
        print(llstr)
        
# Insertion of data at Begining:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
        
# Insertion at End:
    def insert_at_end(self,data):
        if self.head is None:
            self.head = Node(data, None)
            return
        itr = self.head 
        while itr.next:
            itr = itr.next
        itr.next = Node(data, None)
# Creating Data List:
    def insert_values(self):
        self.head = None 
        N = int(input("Enter the length of the List: "))
        for data in range(N):
            intgr = int(input("Enter the Value: "))
            data = int(input("Enter the data value: "))
            if intgr==0:
                self.insert_at_beg(data)
            elif intgr==1:
                self.insert_at_end(data)
            else: 
                raise Exception("Invalid Input")
                
# Program Execution:
if __name__ == '__main__':
    ll = Linkedlist()
    ll.insert_values()
    ll.printlist()
            
        