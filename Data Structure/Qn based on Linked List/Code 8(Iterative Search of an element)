class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)# as at end the link should be Null
        
    #Search an Element in a Linked List:(Iterative)
    def search_iterative(self,x):
        #Initialize itr to head:
        itr=self.head
        #loop till current not equal to None:
        while itr!=None:
            if itr.data==x:
                return True # data found
            itr= itr.next
        return False # Data not Found 

#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    ll.insert_at_beg(141)
    ll.insert_at_beg(302)
    ll.insert_at_beg(164)
    # ll.printlist()
    ll.insert_at_end(530)
    ll.insert_at_end(474)
    ll.insert_at_end(251)
    ll.insert_at_end(832)
    ll.insert_at_end(101)
    ll.printlist()
    if ll.search_iterative(102): 
        print("Yes") 
    else: 
        print("No") 