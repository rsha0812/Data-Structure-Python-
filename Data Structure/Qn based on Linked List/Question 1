'''
Question : In LinkedList class that we implemented in our tutorial add following two methods,
def insert_after_value(self, data_after, data_to_insert):
    # Search for first occurance of data_after value in linked list
    # Now insert data_to_insert after data_after node

def remove_by_value(self, data):
    # Remove first node that contains data
'''
#Solution:

class Node:
    def __init__(self,data=None, next=None):
        self.data = data 
        self.next= next
        
class LinkedList:
    def __init__(self):
        self.head = None 
        
#Utility Function to print list 
    def printlist(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr = self.head # Created a temporary Variable
        llstr = ' '
        while itr: 
            llstr += str(itr.data)+'---->'
            # if: 
            #     itr.next
            # else:
            #     str(itr.data)
            itr = itr.next
        print(llstr)
        
    #Get Length of the string:
    def get_length(self):
        count=0 
        itr=self.head
        while itr:
            count+=1
            itr = itr.next
        return count
        
    # Inserting the Value at beginning:
    def insert_at_beginning(self, data):
        node = Node(data, self.head)
        self.head = node
        
    # Inserting the value at End: 
    def insert_at_end(self,data):
        if self.head is None:
            self.head = Node(data, None)
            return
        itr = self.head
        while itr.next:
            itr = itr.next
        itr.next= Node(data,None)
        
    # Insert the Value at Specific Index:
    def insert_at(self,index,data):
        if index<0 or index >= self.get_length():
            raise Exception("Invalid Index")
        if index == 0:
            self.insert_at_beginning(data)
            return
        count = 0 
        itr =self.head
        while itr:
            if count== index-1:
                node = Node(data, itr.next)
                itr.next = node
                break
            itr = itr.next
            count +=1
            
    # Inserting Value by creating a data list:
    def insert_value(self, data_list):
        self.head = None 
        for data in data_list:
            self.insert_at_end(data)
            
    # Removing data at given Index:
    def remove_at(self,index):
        if index<0 or index >= self.get_length():
            raise Exception("Invalid Index")
        if index ==0:
            self.head=self.head.next
            return
        count=0
        itr = self.head
        while itr:
            if count == index-1:
                itr.next = itr.next.next
                break 
            itr = itr.next
            count +=1
            
    # Inserting given value at certain position after specific data value:
    def insert_after_value(self, data_after, data_to_insert):
        if self.head is None:
            return

        if self.head.data==data_after:
            self.head.next = Node(data_to_insert,self.head.next)
            return

        itr = self.head
        while itr:
            if itr.data == data_after:
                itr.next = Node(data_to_insert, itr.next)
                break

            itr = itr.next
            
    # Removing given value by data :
    def remove_by_value(self, data):
        if self.head is None:
            return

        if self.head.data == data:
            self.head = self.head.next
            return

        itr = self.head
        while itr.next:
            if itr.next.data == data:
                itr.next = itr.next.next
                break
            itr = itr.next
    
        
            
# Execution of programme:
if __name__ == '__main__':
    ll = LinkedList()
    ll.insert_value(["banana","mango","grapes","orange"])
    ll.printlist()
    ll.insert_after_value("mango","apple")
    ll.printlist()