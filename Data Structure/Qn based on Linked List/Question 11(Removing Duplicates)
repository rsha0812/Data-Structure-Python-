class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)
        
    #Removing Duplicates :
    def removeduplicates(self):
        itr = self.head
        if itr is None:
            return
        while(itr.next!=None):
            if(itr.data==itr.next.data):
                new = itr.next.next
                itr.next = None
                itr.next = new
            else:
                itr = itr.next
        return self.head 
        
        
#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    print("The Given linked list")
    ll.insert_at_beg(11)
    ll.insert_at_end(11)
    ll.insert_at_end(11)
    ll.insert_at_end(21)
    ll.insert_at_end(43)
    ll.insert_at_end(43)
    ll.insert_at_end(60)
    ll.printlist()
    print("The Linked List after removing duplicates: ")
    ll.removeduplicates()
    ll.printlist()