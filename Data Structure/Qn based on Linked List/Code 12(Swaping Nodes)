class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)# as at end the link should be Null
#####Swap nodes in a linked list without swapping data#########
    def SwapNodes(self,x,y):
        # if x and y are same:
        if (x==y):
            return
        #if X or Y is the head
        # search for x:(keep track of prev and current nodes):
        prevx = None
        itrx = self.head
        while(itrx != None) and (itrx.data != x):
            prevx = itrx
            itrx = itrx.next
            
        # search for x:(keep track of prev and current nodes):
        prevy = None
        itry = self.head
        while(itry != None) and (itry.data != y):
            prevy = itry
            itry = itry.next
            
        # if x or y are not present: 
        if itrx==None or itry == None:
            return
        
        #if x is not the head of linked list:
        if prevx != None: 
            prevx.next = itry 
        else: #make y the new head 
            self.head = itry
    
        # If y is not head of linked list 
        if prevy != None: 
            prevy.next = itrx
        else: # make x the new head 
            self.head = itrx
            
        # Swap next pointers 
        temp = itrx.next
        itrx.next = itry.next
        itry.next = temp 
            
#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    ll.insert_at_beg(141)
    ll.insert_at_beg(302)
    ll.insert_at_beg(164)
    # ll.printlist()
    ll.insert_at_end(530)
    ll.insert_at_end(474)
    ll.insert_at_end(251)
    ll.insert_at_end(832)
    ll.insert_at_end(101)
    print ("Given Linked List: ")
    ll.printlist() 
    ll.SwapNodes(530,251)
    print("\n Linked list after swapping: ")
    ll.printlist()
        
        