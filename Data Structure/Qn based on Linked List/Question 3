'''
You are given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer.
Insert this node at the tail of the linked list and return the head node of the linked list formed after inserting this new node.
The given head pointer may be null, meaning that the initial list is empty.
O/P: 141 -> 302 -> 164 -> 530 -->474
'''

#Solution:


class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)# as at end the link should be Null
        
    #Getting Length of list:
    # def get_length(self):
    #     count = 0
    #     itr = self.head # from beginning
    #     while itr:
    #         count+=1
    #         itr = itr.next
    #     return
        
#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    ll.printlist()
    ll.insert_at_beg(141)
    ll.insert_at_end(302)
    ll.insert_at_end(164)
    ll.insert_at_end(530)
    ll.insert_at_end(474)
    ll.printlist()
    # print("Length of the list: ",ll.get_length())
    