class Node:
    def __init__(self,data=None,next=None):
        self.data = data
        self.next = next
        
class Linkedlist:
    def __init__(self):
        self.head = None 
        
    #Utility Function:
    def printlist(self):
        if self.head is None:
            return
        itr = self.head
        llstr=" "
        while itr: 
            llstr += str(itr.data)+'-->'
            itr = itr.next
        print(llstr)
        
    #Insert at Beginning:
    def insert_at_beg(self,data):
        node = Node(data,self.head)
        self.head = node
        
    #Get Length of list:
    def get_length(self):
        itr = self.head 
        count = 0
        while itr:
            itr = itr.next
            count += 1
        return count
        
    # Searching Element:
    def search(self, x):
        itr = self.head 
        while itr!=None:
            if (itr.data==x):
                return True
            itr = itr.next
        return False
        
    # Accessing Element using index value:
    def access_value(self,indx):
        if (indx<0 or indx>self.get_length()):
            raise Exception("Invalid Index")
        count = 0
        itr = self.head 
        while itr:
            if (count==indx-1):
                print("Element: ",itr.data)
                break
            itr = itr.next 
            count+=1
            
#Execution of program:
if __name__ == '__main__':
    ll = Linkedlist()
    # ll.head = Node("Null")
    # print(ll.head.data)
    ll.insert_at_beg("banana")
    ll.insert_at_beg("chiku")
    ll.insert_at_beg("apple")
    ll.insert_at_beg("grapes")
    ll.insert_at_beg("mango")
    ll.printlist()
    print("The Length of list: ",ll.get_length())
    if ll.search("Grapes"):
        print("Yes")
    else:
        print("No")
    ll.access_value(3)
    
