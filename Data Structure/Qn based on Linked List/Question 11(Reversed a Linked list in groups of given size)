class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)# as at end the link should be Null

#####Reversing a Linked List##########################
    #Reverse a linked list in groups of given size:
    def reverse_size(self,head,k):
        itr = head
        next = None
        prev = None
        count = 0 
    #Reverse first k nodes of the linked list:
        while (itr is not None and count<k):
            next = itr.next
            itr.next=prev
            prev = itr
            itr= next
            count+=1

# Next is now the pointer to (k+1)th node recursively call for the list 
# starting from current. And make rest of the list as next of first node.
        if(next is not None):
            head.next = self.reverse_size(next,k)
        #Prev is new head of the Input List:
        return prev

#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    ll.insert_at_beg(141)
    ll.insert_at_beg(302)
    ll.insert_at_beg(164)
    # ll.printlist()
    ll.insert_at_end(530)
    ll.insert_at_end(474)
    ll.insert_at_end(251)
    ll.insert_at_end(832)
    ll.insert_at_end(101)
    print ("Given Linked List: ")
    ll.printlist() 
    ll.head = ll.reverse_size(ll.head,3)
    print("\n Reversed Linked List: ")
    ll.printlist()