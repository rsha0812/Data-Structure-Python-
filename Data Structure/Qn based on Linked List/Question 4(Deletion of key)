'''
Question: Delete the node at a given position in a linked list and return a reference to the head node. The head is at position 0. The list may be empty after you delete the node. In that case, return a null value.
'''
#Solution: 

class Node:
    def __init__(self, data=None, next=None):
        self.data = data 
        self.next = next 
class Linkedlist():
    def __init__(self):
        self.head = None
        
    # Inserting the value at Beginning:
    def insert_at_beg(self,data):
        node = Node(data, self.head)
        self.head = node
    
    # Utility Function:
    def printlist(self):
        if self.head is None: # if list is empty
            print("Linked list is Empty")
            return
        #if list has some values:
        itr = self.head
        llstr = ' ' # created a blank list 
        while itr:
            llstr += str(itr.data)+ '--->'
            itr = itr.next
        print(llstr)
        
    #Inserting the Values from End:
    def insert_at_end(self,data):
        if self.head is None: # if list is empty
            node = Node(data,None)
            return
        itr= self.head # if list has some Values
        while itr.next:
            itr = itr.next
        itr.next = Node(data,None)# as at end the link should be Null
        
    #Getting Length of list:
    # def get_length(self):
    #     count = 0
    #     itr = self.head # from beginning
    #     while itr:
    #         count+=1
    #         itr = itr.next
    #     return
    
    # Deleting Node 
    def delete_node(self,key):
        # Store head node 
        itr = self.head
        # If head node itself holds the key to be deleted:
        if (itr is not None):
            if(itr.data==key):
                self.head=itr.next
                itr=None
                return
    # Search for the key to be deleted, keep track of the  
    # previous node as we need to change 'prev.next' 
        while(itr is not None):
            if itr.data==key:
                break
            prev = itr
            itr=itr.next
    # if key was not present in linked list:
        if(itr==None):
            return
    # Unlink the node from linked list  
        prev.next=itr.next
        itr = None
        
#execution of program 
if __name__ == '__main__':
    ll = Linkedlist()
    ll.printlist()
    ll.insert_at_beg(141)
    ll.insert_at_end(302)
    ll.insert_at_end(164)
    ll.printlist()
    ll.insert_at_end(530)
    ll.insert_at_end(474)
    ll.insert_at_end(251)
    ll.insert_at_end(832)
    ll.insert_at_end(101)
    ll.printlist()
    ll.delete_node(164)
    ll.printlist()
    ll.delete_node(832)
    ll.printlist()
    ll.delete_node(251)
    ll.printlist()
    # print("Length of the list: ",ll.get_length())
    