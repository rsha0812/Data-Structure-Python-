class Node:
    def __init__(self, data=None, prev=None, next=None):
        self.data = data
        self.prev = prev 
        self.next = next 
        
class doublylinkedlist:
    def __init__(self):
        self.head = None
        
    #Utility Function :
    def printlist(self):
        itr = self.head 
        # llstr = ' '
        # llstr +=  str(itr.data) +'-->'
        while(itr):
            print(itr.data)
            itr = itr.next 
        # print(llstr)
        
    #Insertion at front of DLL:
    def insert_at_front(self,data):
        if self.head is None: # List is Empty
            new_node = Node(data)
            new_node.prev = None
            self.head = new_node # Appointing new_node as head
        else:
            new_node = Node(data)
            self.head_prev = new_node
            new_node.next=self.head
            self.head = new_node # Moving head to new_node
            new_node.prev = None
            
    # Appending elements in List:
    def insert_at_end(self,data): # List is Empty
        if self.head is None:
            new_node = Node(data)
            new_node.prev = None
            self.head = new_node
        else: # Adding node at end
            new_node = Node(data)
            itr = self.head 
            while itr.next:
                itr = itr.next 
            itr.next = new_node # next of old node pointing new node 
            new_node.prev = itr
            new_node.next = None
#Execution of program:       
if __name__ == '__main__':
    dll = doublylinkedlist()
    dll.insert_at_front(1)
    dll.insert_at_end(2)
    dll.insert_at_end(3)
    dll.insert_at_end(5)
    dll.insert_at_end(7)
    dll.insert_at_front(9)
    dll.printlist()
    
        
